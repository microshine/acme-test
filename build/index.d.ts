
// FILE GENERATED BY `rollup-plugin-dts@0.13.0`
// https://github.com/Swatinem/rollup-plugin-dts

declare type Base64UrlString = string;

declare type URL = string;
interface IDirectory {
    newNonce: URL;
    newAccount: URL;
    newOrder: URL;
    newAuthz: URL;
    revokeCert: URL;
    keyChange: URL;
    meta?: {
        termsOfService?: URL;
        website?: URL;
        caaIdentities?: URL[];
        externalAccountRequired?: boolean;
    };
}

interface IToken {
    protected: Base64UrlString;
    payload: Base64UrlString;
    signature: Base64UrlString;
}

interface ICreateAccount {
    contact?: string[];
    termsOfServiceAgreed?: boolean;
    onlyReturnExisting?: boolean;
    externalAccountBinding?: IToken;
}
interface IUpdateAccount {
    contact: string[];
}

interface IIdentifier {
    type: string;
    value: string;
}
interface INewOrder {
    identifiers: IIdentifier[];
    notAfter?: string;
    notBefore?: string;
}
interface IFinalize {
    csr: string;
}

declare type AuthorizationStatus = "pending" | "valid" | "invalid" | "deactivated" | "expired" | "revoked";
declare type ChallengeStatus = "pending" | "processing" | "valid" | "invalid";
interface IChallenge {
    type: string;
    status: ChallengeStatus;
    url: string;
    validated?: string;
    error?: object;
}
interface IHttpChallenge extends IChallenge {
    token: string;
}
interface IAuthorization {
    identifier: IIdentifier;
    status: AuthorizationStatus;
    expires?: string;
    challenges: IChallenge[];
    wildcard?: boolean;
}

declare enum RevocationReason {
    Unspecified = 0,
    KeyCompromise = 1,
    CACompromise = 2,
    AffiliationChanged = 3,
    Superseded = 4,
    CessationOfOperation = 5,
    CertificateHold = 6,
    RemoveFromCRL = 8,
    PrivilegeWithdrawn = 9,
    AACompromise = 10
}
interface IAcmeClientOptions {
    /**
     * Private key for authentication
     */
    authKey: CryptoKey;
    debug?: boolean;
}
interface ICreateJwsOptions {
    url?: string;
    kid?: string;
    omitNonce?: boolean;
    key?: CryptoKey;
}
interface IGetOptions {
    hostname?: string;
}
interface IPostResult<T = any> extends IHeaders {
    status: number;
    result: T;
}
interface IHeaders {
    link?: string | string[];
    location?: string;
}
interface IAuthKey {
    key: CryptoKey;
    id?: Base64UrlString;
}
declare type Method = "POST" | "GET";
/**
 * Class of work with ACME servers
 */
declare class AcmeClient {
    lastNonce: string;
    directory?: IDirectory;
    authKey: IAuthKey;
    private debug;
    constructor(options: IAcmeClientOptions);
    /**
     * Retrieving a list of controllers from an ACME server
     * @param url ACME Server Controller List Issue URL
     */
    initialize(url: string): Promise<any>;
    /**
     * Confirmation Code Request
     */
    nonce(): Promise<string>;
    /**
     * Create account.
     * To create a new account, you must specify the termsOfServiceAgreed: true parameter.
     * To search for an account, you must specify the parameter onlyReturnExisting: true.
     * @param params Request parameters
     */
    createAccount(params: ICreateAccount): Promise<IPostResult<any>>;
    /**
     * Update account settings.
     * @param params Updateable parameters
     */
    updateAccount(params: IUpdateAccount): Promise<IPostResult<any>>;
    /**
     * Account key change
     * @param key New key
     */
    changeKey(key?: CryptoKey): Promise<IPostResult<any>>;
    /**
     * Certificate revocation.
     * @param certificate
     * @param reason Reason for feedback
     */
    revoke(certificate: BufferSource, reason?: RevocationReason): Promise<IPostResult<unknown>>;
    /**
     * Account deactivation.
     * changes account status to deactivated
     */
    deactivateAccount(): Promise<IPostResult<any>>;
    /**
     * Authorization deactivation.
     * changes authorization status to deactivated
     */
    deactivateAuthorization(url: string): Promise<IPostResult<IAuthorization>>;
    /**
     * Deactivation Request
     * @param url Deactivation element URL
     */
    deactivate<T>(url: string): Promise<IPostResult<T>>;
    /**
     * Request for ACME server with error handling badNonce
     * @param url адресс сервера ACME
     * @param method default "GET"
     * @param params
     * @param kid dafeult true
     */
    request<T>(url: string, method?: Method, params?: any, kid?: boolean): Promise<IPostResult<T>>;
    /**
     * Request for ACME server
     * @param url адресс сервера ACME
     * @param method default "GET"
     * @param params
     * @param kid dafeult true
     */
    requestACME<T>(url: string, method?: Method, params?: any, kid?: boolean): Promise<IPostResult<T>>;
    /**
     * Create a new order.
     * Returns an existing order if the identifiers parameter matches
     * @param params
     */
    newOrder(params: INewOrder): Promise<IPostResult<any>>;
    /**
     * Getting data about challenge.
     * The POST method starts checking on the ACME server side.
     * @param url адресс сhallenge
     * @param method метод вызова
     */
    getChallenge(url: string, method?: Method): Promise<IPostResult<IHttpChallenge>>;
    /**
     * Order finalize
     * @param url
     * @param params
     */
    finalize(url: string, params: IFinalize): Promise<IPostResult<any>>;
    /**
     * Retrieving Authorization Data
     * @param url адрес авторизации
     * @param method метод вызова
     */
    getAuthorization(url: string, method?: Method): Promise<IPostResult<IAuthorization>>;
    /**
     * Obtaining a certificate of a complete order
     * @param url
     * @param method
     */
    getCertificate(url: string, method?: Method): Promise<IPostResult<string[]>>;
    /**
     * Creation JWS.
     * @param payload
     * @param options
     */
    createJWS(payload: any, options: ICreateJwsOptions): Promise<any>;
    /**
     * Getting an account id.
     */
    getKeyId(): any;
    /**
     * Getting the public key.
     * @param key
     */
    exportPublicKey(key?: CryptoKey): Promise<any>;
    /**
     * Getting the secret key.
     * @param key
     */
    private getKeyPem;
    /**
     * Returns a list of ACME server controllers.
     */
    private getDirectory;
    /**
     * Getting replay-nonce parameter response from the header
     * @param response
     */
    private getNonce;
    /**
     * Causes a time delay of a specified number of ms
     * @param ms
     */
    private pause;
    /**
     * Logging responses from the ACME server
     * @param url
     * @param res
     * @param method
     */
    private logResponse;
}

export { AcmeClient, IAcmeClientOptions, IAuthKey, ICreateJwsOptions, IGetOptions, IHeaders, IPostResult, RevocationReason };
